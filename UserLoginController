package com.auto.ngdms.sys.web;

import com.auto.ngdms.base.model.BsAscBasicinfo;
import com.auto.ngdms.base.model.BsOrganization;
import com.auto.ngdms.base.model.BsUser;
import com.auto.ngdms.base.service.BsAscBasicinfoService;
import com.auto.ngdms.base.service.BsOrganizationService;
import com.auto.ngdms.base.service.BsUserRoleMapService;
import com.auto.ngdms.base.service.BsUserService;
import com.auto.ngdms.common.service.exception.ServiceException;
import com.auto.ngdms.common.util.Constant;
import com.auto.ngdms.common.util.ResourceRangeUtil;
import com.auto.ngdms.common.util.db.ConstSet;
import com.auto.ngdms.sys.web.auth.SessionManager;
import com.auto.ngdms.sys.web.util.CipherUtil;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by spf on 2015-10-21.
 */
@Controller
@RequestMapping("/sys")
public class UserLoginController {

    private static final Logger LOG = LogManager.getLogger(UserLoginController.class);

    @Autowired
    private BsUserService bsUserService;
    @Autowired
    private BsUserRoleMapService bsUserRoleMapService;
    @Autowired
    private BsOrganizationService bsOrganizationService;
    @Autowired
    private BsAscBasicinfoService bsAscBasicinfoService;

    @RequestMapping(value = "/login",method = RequestMethod.POST)
    public ModelAndView login(@RequestBody BsUser bsUser,HttpServletRequest request,HttpServletResponse response,HttpSession session) throws
            ServiceException
    {
//
        bsUser.setPassword(CipherUtil.generatePassword(bsUser.getPassword()));
        List<BsUser> usersList = bsUserService.queryByCdt(bsUser);
        try {
            if(usersList.size()>0){

                bsUser=usersList.get(0);
                String loginUser=bsUser.getUserName();
                if(bsUser.getIsValid().equals(ConstSet.YesNo.yes.getName())){
                    List userInfo= bsUserService.getUserInfo(bsUser.getId());
                    List authResources= bsUserService.getUserRES(bsUser.getId());
                    if(userInfo.size()>0&&authResources.size()>0) {
                                        //踢出已登入的用户
                    SessionManager.checkLoginUser(bsUser);
                        BsOrganization org = new BsOrganization();
                        Object orgTye = ((Map) userInfo.get(0)).get(Constant.SESSION_USER_INFO_ORG_YEPE);
                        if (orgTye != null && (orgTye.toString().equals(ConstSet.OrganizationType.dealerOrg.getName()) || orgTye.toString().equals(ConstSet.OrganizationType.departmentOrg))) {
                            Object entityCode = ((Map) userInfo.get(0)).get(Constant.SESSION_USER_INFO_ENTITY_CODE);
                            if (entityCode != null && !entityCode.toString().equals("")) {
                                org.setEntityCode(entityCode.toString());
                                BsAscBasicinfo ascBasicinfo = new BsAscBasicinfo();
                                ascBasicinfo.setEntityCode(entityCode.toString());
                                List<BsAscBasicinfo> bsAscBasicinfos = bsAscBasicinfoService.queryByCdt(ascBasicinfo);
                                if (bsAscBasicinfos.size() > 0)
                                    SessionManager.setSessionAttribute(Constant.SESSION_USER_BASIC_INFO, bsAscBasicinfos.get(0));
                            }
                        }
                        List<BsOrganization> orgLists = bsOrganizationService.queryByCdt(org);
                        SessionManager.setSessionAttribute(Constant.SESSION_USER_INFO, userInfo.get(0));
                        SessionManager.setSessionAttribute(Constant.SESSION_USER_RES_LIST, authResources);
                        SessionManager.setSessionAttribute(Constant.SESSION_USER_ORG, orgLists);
                        ResourceRangeUtil util = new ResourceRangeUtil();
                        SessionManager.setSessionAttribute(Constant.SESSION_USER_NAV, util.buildNAV(authResources));
                        response.getWriter().write("success");
                    }else{
                        response.getWriter().write("resError");
                    }
                }else{
                    response.getWriter().write("userFreeze");
                }
            }else{
                response.getWriter().write("authError");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }



    @RequestMapping(value = "/loginOut",method = RequestMethod.POST)
    public ModelAndView loginOut(HttpServletRequest request,HttpServletResponse response) {
        try {
            ServletContext application=SessionManager.getApplication();

            Map<String, Map> loginUserMap = (Map<String, Map>) application.getAttribute(Constant.APPLICATION_LOGIN_USER_MAP);
            boolean isExist = false;
            String sessionId = request.getSession().getId();
            if(loginUserMap!=null){
                Map userInfo= (Map) SessionManager.getSessionAttribute(Constant.SESSION_USER_INFO);
                loginUserMap.remove(userInfo.get(Constant.SESSION_USER_INFO_USER_ID).toString());
                application.setAttribute(Constant.APPLICATION_LOGIN_USER_MAP,loginUserMap);
            }
            //销毁session
            SessionManager.sessionInvalidate();
//            SessionManager.removeSessionAttribute(Constant.SESSION_USER_INFO);
//            SessionManager.removeSessionAttribute(Constant.SESSION_USER_RES_LIST);
//            SessionManager.removeSessionAttribute(Constant.SESSION_USER_NAV);
            response.getWriter().write("success");

        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    @RequestMapping(value = "/loadLoginUser",method = RequestMethod.POST)
    public ModelAndView loadUserRES(HttpServletRequest request,HttpServletResponse response,HttpSession session){
        try {
        Map userInfo= (Map) session.getAttribute(Constant.SESSION_USER_INFO);
        List resources= (List) session.getAttribute(Constant.SESSION_USER_RES_LIST);
        if(userInfo==null){
            response.getWriter().write("authError");
            return  null;
        }
        ModelAndView modelAndView = new ModelAndView("");
        Map<String,Object> jsonMap=new HashMap<>();
        jsonMap.put("loginUser",userInfo);
        jsonMap.put("resources",resources);
        jsonMap.put("result","success");
        modelAndView.addObject("jsonValue",jsonMap);
            return modelAndView;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return  null;
    }
}
